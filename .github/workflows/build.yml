
name: Build

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'package.json'
      - 'CHANGELOG.md'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      tags:
        required: false
        description: 'Misc tags'

# cancel older, redundant runs of same workflow on same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref_name }}
  cancel-in-progress: true

jobs:

  # -------------------------------------------------------------------------------
  #  Do a clean build, test, and publish
  # -------------------------------------------------------------------------------
  build:
    name: Build for Node-${{ matrix.node_ver }} ${{ matrix.config.target }}/${{ matrix.architecture }}
    runs-on: ${{ matrix.config.os }}
#    container: ${{ matrix.config.container }}

    env:
      BUILD_NUMBER: ${{ github.run_number }}
      AWS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    
    strategy:
      matrix:
        config:
          # - { os: windows-latest, cc: "cl",    cxx: "cl", node: '16' }
          - { os: ubuntu-20.04,   target: "linux", container: "openziti/ziti-builder:1.0.7" }
          - { os: macos-latest,   target: "macos" }
        architecture: [x64, arm64]
        node_ver: [ 16, 18, 19, 20]
      fail-fast: false

    steps:

    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: 'recursive'
        # token: ${{ secrets.ZITI_CI_GH_TOKEN }}

    - name: Get crossbuild tools
      if: matrix.config.target == 'linux' && matrix.architecture != 'x64'
      run: |
        sudo apt update -y
        sudo apt install -y crossbuild-essential-${{ matrix.architecture }}

    - name: Node Version
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node_ver }}
    
    - name: Extract branch name
      shell: bash
      run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
      id: extract_branch

    - name: Print branch name
      shell: bash
      run: |
        echo "## branch name is: ${{ steps.extract_branch.outputs.branch }}"

    - name: Get current date
      id: date
      run: echo "date=$(date)" >> $GITHUB_OUTPUT

    - name: Install CMake/Ninja
      uses: lukka/get-cmake@latest

    - name: Run VCPKG
      uses: lukka/run-vcpkg@v11
      with:
        # tag: 2023.10.19
        vcpkgGitCommitId: '8eb57355a4ffb410a2e94c07b4dca2dffbee8e50'

    - name: gcc version
      run: |
        gcc --version
    - name: cmake version
      run: |
        cmake --version
    - name: ninja version
      run: |
        ninja --version
    - name: node version
      run: |
        node --version
    - name: npm version
      run: |
        npm --version


    - name: Build NodeJS-SDK (Linux | Mac)
      run: |
        cd ${{ runner.workspace }}/${{ github.event.repository.name }}
        # TODO move this into CMake process
        # --BUILD_DATE="$BUILD_DATE" --ZITI_BRANCH="`git branch --show-current`" 
        # --ZITI_COMMIT="`git rev-parse --short HEAD`" --ZITI_VERSION="`jq -r .version package.json`" 
        # --ZITI_OS="$RUNNER_OS" --ZITI_ARCH="x64"
        npm install --build-from-source
      env:
        PRESET: ci-${{ matrix.config.target }}-${{ matrix.architecture }}
        TARGET_ARCH: ${{ matrix.architecture }}
        BUILD_DATE: ${{ steps.date.outputs.date }}
      if: |
        matrix.config.os == 'ubuntu-20.04' ||
        matrix.config.os == 'macOS-latest'

# disabled for now
#    - name: Build NodeJS-SDK (Windows)
#      run: |
#        cd ${{ runner.workspace }}/${{ github.event.repository.name }}
#        npm install --build-from-source --cd=%CD%
#      if: |
#        matrix.config.os == 'windows-latest'

    - name: Hello test
      if: matrix.architecture == 'x64'
      run: |
        node tests/hello.js

    - name: upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ziti_nodejs_${{ matrix.config.target }}_${{ matrix.architecture }}_nodev${{ matrix.node_ver }}
        path: |
          ./build/Release/ziti_sdk_nodejs.node
          if-no-files-found: error

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      if: env.AWS_KEY_ID != ''
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Publish Binary to S3 (for all OS's, Node versions, and architectures)
      run: |
        ./node_modules/.bin/node-pre-gyp package unpublish publish
        sleep 5
      if: |
        steps.extract_branch.outputs.branch == 'main' &&  !(matrix.config.os == 'ubuntu-20.04' && matrix.config.node == '16' && matrix.architecture == 'x64' && steps.extract_branch.outputs.branch == 'main')

    - name: Install Binary
      run: |
        npm install --fallback-to-build=false > /dev/null
        sleep 5
      if: |
        steps.extract_branch.outputs.branch == 'main'

    - name: Fetch Binary info
      if: env.AWS_KEY_ID != ''
      run: |
        ./node_modules/.bin/node-pre-gyp info

    - name: NPM Publish
      uses: JS-DevTools/npm-publish@v1
      with:
        token: ${{ secrets.NPM_TOKEN }}
        access: public
      if: |
        matrix.config.os == 'ubuntu-20.04' && matrix.config.node == '16' && matrix.architecture == 'x64' && steps.extract_branch.outputs.branch == 'main'
